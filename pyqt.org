#+STARTUP: hidestars showall 
#+OPTIONS: ^:nil toc:nil num:nil html-postamble:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://swteam:8080/~dov/dov-org.css" />
#+COMMENT: Do (setenv "QT_SCALE_FACTOR" 2.0) for demo
#+COMMENT: (setq org-image-actual-width nil)

#+AUTHOR: Dov Grobgeld
#+TITLE: pyqt presentation
#+DATE: 2024-08-03 Sat

* Abstract

In this lecture I will give brief background of different GUI libraries and paradigms in python. I will do a deep dive into PyQt and show lots of code examples. I will briefly mention the Qt GUI builder (and why I don't like it), scientific visualization, animation, and how to use an embedded web browser as a python frontend.

* About myself
  - Made Aliyah from Sweden in 1989
  - M.Sc. in Physics from the Weizmann Institute 1991
  - Consultant for Prof. Hadassa Degani Since ~1992
  - Major work at companies in Software and algorithms development:
    - Orbotech - 16y 
    - XJet - 13y
  - Major computer language tools:
    - C/C++
    - Python :snake:
    - In the past (perl üê™, tcl/tk, matlab, java :coffee:, and more)

* My main WIS applications
  - Dr3TP
  - DrDTI
  - FitExplorer    

* Example 1. Dr3TP
  - MRI cancer diagnostics
#+ATTR_ORG: :width 800
  [[file:images/dr3tp-screenshot.png][dr3tp-screenshot.png]]
  
* Example 2. FitExplorer
  - A tool for graphically matching fitting functions with data
#+ATTR_ORG: :width 600
  [[file:images/fitexplorer-screenshot.png][fitexplorer-screenshot.png]]

* GUI's
** Linux (and crossplatform)
  - Gtk
  - Qt
  - WxWidgets
  - Web
  - Mobile 
  - And lots of others
** Python
  - TkInter - (please don't use!) :poo:
  - PyQt :-)
  - PyGtk
  - Kivy
  - Lot's of others
  - pyimgui - Immediate mode gui

* A few words about Qt
  - Written in C++
  - Core is licensed LGPL, i.e. you can use it in commercial application (though it is tricky)
  - Additional parts are licensed GPL. You're source code must be free to use this.
  - Also allow commercial licensing
  - Qt for python :snake:
    - Two versions: 
      - PyQt - Commercial or GPL
      - Qt for Python (PySide5) - LGPL
  - Current version is Qt6 (though I'm using Qt5 here)

* Event driven programming
  - Qt belongs to "event driven programming" paradigm
    - 1. Define interface
    - 2. Connects events with callbacks (that may create more user interface)
  - Enter main loop
    
* PyQt hello world
 
 - Define widgets (controls) and enter main loop

[[file:examples/hello-pyqt.py][hello-pyqt.py]]

* Layout management

  - Layout management is inserted between the parent and the widgets
  - No need to place widgets by pixel position
  - [[file:examples/hello-layout.py][hello-layout.py]]
  - Layouts types:
    - ~QVBoxLayout~ and ~QHBoxLayout~ - Linear vertical and horizontal
    - ~QGrid~ - 2D grid
    - ~QFormLayout~ - [[file:examples/hello-form-layout.py][hello-form-layout.py]]

* Tabs
  - Tabs is another useful way of organizing the user interface
  - [[file:examples/hello-tabs.py][hello-tabs.py]]    

* Coloring the interface

  - Color the interface by using a stylesheet (like in the web)
  - Can color globally or for individual widgets (typically not recommended)
  - [[file:examples/hello-stylesheet.py][hello-stylesheet.py]]

* Reactive 

  - Reactions are set up by ~widget.signal_name.connect(callback_method)~
    - In Qt terminology you connect a /signal/ to a /slot/
  - signal names are listed in the widget documentation
  - E.g. for buttons:
    - https://doc.qt.io/qt-6/qpushbutton.html
    - Most common signal is ~clicked~

  - Example: [[file:examples/hello-name.py][hello-name.py]]

* Writing an "application"

   - An application has:
     - A menu bar
     - A central widget
     - A status row   
   - [[file:examples/hello-mainwindow.py][hello-mainwindow.py]]

* Designer

  - You can also "draw" the application through a GUI editor
  - Also a great way to inspect/find widgets
  - Exec: designer-qt5
  - [[file:examples/mainwin.ui][mainwin.ui]]
  - Load and connect to it: [[file:examples/hello-ui.py][hello-ui.py]]
   
* Why I don't like designers
  - (But your preferences may differ...)
     1. Prevents reuse and causes bad coding practices
      - It is easy to extend a widget by:
  #+begin_src python
  class MyTemp(QtWidget):
    :
  #+end_src
      - But it is difficult (impossible) to do the same in a designer. 
      - Invites cut and paste (bad way of programming!)
  - 2. Merging XML ui files in git is "hellish"  üëπ...
  - 3. Difficult to use 3rd party libraries, e.g. pyqtgraph

* The graphics view
  - A widget canvas with items that may be moved, change color etc
  - [[file:examples/hello-graphicsview.py][hello-graphics-view.py]]

* Let's try animation, move the car
  - [[file:examples/car-stuck.py][car-stuck.py]]
  - Doesn't work? Why?

* The solution is to use a worker thread!
  - [[file:examples/car-worker-thread.py][car-worker-thread.py]]
  
* Embed a browser in a widget

- QtWebEngine widget
- [[file:examples/hello-webengine.py][hello-webengine.py]]
- But why? See next page...

* Add a webserver to python!
  - Create a python thread
  - Serve webpages by flask
  - [[file:examples/hello-webengine-and-flask.py][hello-webengine-and-flask.py]]
  - Can wite entire backend front end application this way!
  - Supports advanced features like:
    - Unsolicited messages from the backend (web streams)
    - web sockets (two way communication between backend and front end)
  
* pyqtgraph 
  - Scientific widgets
  - MIT license
  - [[file:examples/hello-xygraph.py][hello-xygraph.py]]
  
* matplotlib
  - Need to install matplotlib python qt backend 
  - Embed matplotlib in python
  - [[file:examples/hello-qt-matplotlib.py][hello-qt-matplotlib.py]]
  - Updating graph (animation) example: https://www.pythonguis.com/tutorials/plotting-matplotlib/
  
* General notes
  - Separate GUI from functionality!
  - I typically start with writing a command line interface for the functionality
  - Only once it works builds GUI
  - Deployment is difficult! 
  - Easier with C++ (though I have little experience in deploying python...)

* References
  - Qt home page: https://www .qt.io
  - Qt for python home page: https://doc.qt.io/qtforpython-5/
  - Flask (web framework) home page: https://flask.palletsprojects.com/en/3.0.x/
  - https://www.pyqtgraph.org/
  - 
